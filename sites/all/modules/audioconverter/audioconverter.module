<?php 

/**
 * Define some constants
 */
defined('AUDIO_RENDERING_PENDING')
        or define('AUDIO_RENDERING_PENDING', 1);
defined('AUDIO_RENDERING_ACTIVE')
        or define('AUDIO_RENDERING_ACTIVE', 5);
defined('AUDIO_RENDERING_COMPLETE')
        or define('AUDIO_RENDERING_COMPLETE', 10);
defined('AUDIO_RENDERING_FAILED')
        or define('AUDIO_RENDERING_FAILED', 20);

/**
 *Implementation of hook_menu()
 */
function audioconverter_menu() {

  $items['admin/settings/audio-convert'] = array(
          'title' => 'Audio Converter',
          'description' => 'Configure Audio Converter.',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('audioconverter_admin_settings_form'),
          'access arguments' => array('administer site configuration'),
          'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implementation of hook_nodeapi().
*/
function audioconverter_nodeapi(&$node, $op, $teaser=NULL, $page=NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      //Get A List Of All CCK Fields
      foreach (content_fields(NULL, $node->type) as $field) {
        //Filter only allowed audio fields
        if (in_array($field['widget']['module'], audioconverter_allowed_fields()) && $field['type_name']==$node->type) {
          $fname=$field['field_name'];
          //Only convert if conversion is enabled for all fields or for this field.
          $field_settings=variable_get('audioconverter_' . $fname, 0);
          $global_settings=variable_get('audioconverter_all', 0);
          if ($global_settings || $field_settings) {
            $value = $node->$fname;
            foreach ($value as $field_data) {
              //Check if field is empty
              if (empty($field_data['fid'])) {
                continue;
              }
              //Check if this file is already in queue
              $exist=_audioconverter_file_in_queue($field_data['fid']);
              if ($exist) {
                continue;
              }
              //Check if file is already mp3
              $info = pathinfo($field_data['filename']);
              $op=$info['extension'];
              if ($op=='mp3') {
                continue;
              }
              #Else:
              audioconverter_save_file($field_data['fid']);
              if (variable_get('audioconverter_on_save', 0)) {
                //Convert now
                $job=_audio_render_load_job($field_data['fid']);
                _audioconverter_scheduler_start($job);
                drupal_set_message(t('Audio converted to mp3.'));
              }
              else{
                drupal_set_message(t('Audio submission queued for processing. Please wait: our servers are preparing your audio for web displaying.'));
              }
            }
          }
        }
      }   
    break;
  }
}

/**
 * Implementation of hook_form_[form_id]_alter().
 * Add per field settings.
 */
function audioconverter_form_content_field_edit_form_alter(&$form, &$form_state) {
    if (in_array($form['widget_module']['#value'], audioconverter_allowed_fields())) {
    
        $field_name = $form['field_name']['#value'];
        $form['audioconverter'] = array(
                  '#type' => 'fieldset',
                  '#title' => t('Audio Converter Settings'),
                  '#collapsible' => TRUE,
                  '#collapsed' => FALSE
        );

        $form['audioconverter']['autoconversion'] = array(
            '#type' => 'checkbox',
            '#title' => t('Enable automatic audio conversion.'),
            '#description' => t('Automatically convert existing audio fields to mp3. Please make sure the Audio Converter settings are properly configured.'),
            '#default_value' => variable_get('audioconverter_' . $field_name, 0),
        );
      
      $form['submit']['#weight']=10;
      $form['#submit'][]='audioconverter_form_field_submit';
    }
}

/* Save per field settings */
function audioconverter_form_field_submit(&$form, &$form_state) {
    $field_name = $form['field_name']['#value'];
    variable_set('audioconverter_' . $field_name, $form_state['values']['autoconversion']);
}
/**
 * Configuration Form
 *
 * @return
 *   string of form content or error message
 */
function audioconverter_admin_settings_form() {
  global $base_url;

  $form = array();

  $form['audioconverter'] = array(
    '#type' => 'radios',
    '#title' => t('Audio Converter'),
    '#default_value' => variable_get('audioconverter', 0),
    '#options' => array('FFMPEG', 'SOX Utility (not yet supported)'),
    '#description' => 'Please select the application to be used when converting audio files to the mp3 format. For additional information about FFMPEG, check the ' . l(t('FFMPEG Online Manual'), 'http://www.ffmpeg.org/') . '.',
  );

  $form['audioconverter_all'] = array(
    '#type' => 'radios',
    '#title' => t('Audio fields to be converted'),
    '#default_value' => variable_get('audioconverter_all', 0),
    '#options' => array('Use individual field settings', 'Automatically convert all audio fields in the system'),
  );
  
  $form['audioconverter_on_save'] = array(
    '#type' => 'radios',
    '#title' => t('Audio conversion time'),
    '#default_value' => variable_get('audioconverter_on_save', 0),
    '#options' => array('Audio files should be converted on cron', 'Audio files should be converted on Node Submit'),
  );
  
  $form['audioconverter_wav_setting'] = array(
    '#type' => 'radios',
    '#title' => t('What to do after converting files to mp3?'),
    '#default_value' => variable_get('audioconverter_wav_setting', 1),
    '#options' => array('Delete existing .wav files', 'Leave .wav files untouched'),
  );
  
  $form['ffmpeg'] = array(
          '#type' => 'fieldset',
          '#title' => t('FFMPEG Settings'),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE
  );

  $form['ffmpeg']['ffmpeg_executable_path'] = array(
          '#type' => 'textfield',
          '#title' => t('FFMPEG Path'),
          '#default_value' => variable_get('ffmpeg_executable_path', '/usr/bin/ffmpeg'),
          '#description' => t('Path to FFMPEG (ie. /usr/bin/ffmpeg, etc.)')
  );

  $form['ffmpeg']['ffmpeg_executable_command'] = array(
          '#type' => 'textfield',
          '#title' => t('FFMPEG Command Options'),
          '#default_value' => variable_get('ffmpeg_executable_command', ' -i %audiofile %convertfile'),
          '#description' => t('Arguments to be passed to FFMPEG. Tokens available: %audiofile - original audio filename, %convertfile - name of the converted file.')
  );
  
  $form['sox'] = array(
          '#type' => 'fieldset',
          '#title' => t('SOX Utility Settings'),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE
  );

  $form['sox']['sox_executable_path'] = array(
          '#type' => 'textfield',
          '#title' => t('SOX Utility Path'),
          '#default_value' => variable_get('sox_executable_path', '/usr/bin/sox'),
          '#description' => t('Path to the SOX Utility (ie. /usr/bin/sox, etc.')
  );

  $form['sox']['sox_executable_command'] = array(
          '#type' => 'textfield',
          '#title' => t('SOX Command Options'),
          '#default_value' => variable_get('sox_executable_command', ''),
          '#description' => t('Arguments to be passed to the SOX Utility.')
  );
  
  return system_settings_form($form);
}
        
/**
 * Implementation of hook_cron().
 */
function audioconverter_cron() {
  if ($jobs = _audioconverter_scheduler_select()) {
    foreach ($jobs as $job) {
      _audioconverter_scheduler_start($job);
    }
  }
  else {
    watchdog('audioconverter', 'no audio conversion jobs to schedule.', array(), WATCHDOG_DEBUG);
  }
}

function _audioconverter_scheduler_select() {
  // load node and its file object
  $jobs = array();
  $i = 0;
  $result = db_query('SELECT f.fid, f.filepath, f.filesize, f.filename, f.filemime, f.status FROM {audio_rendering} ar INNER JOIN {files}
      f ON ar.fid = f.fid WHERE ar.fid = f.fid AND ar.status = %d AND f.status = %d ORDER BY f.timestamp',
          AUDIO_RENDERING_PENDING, 1);
  while ($job = db_fetch_object($result)) {
    $jobs[] = $job;
  }
  return $jobs;
}


function _audioconverter_scheduler_start($job) {
  $fid = $job->fid;
  _audioconverter_render_job_change_status($fid, AUDIO_RENDERING_ACTIVE);
  
  if (variable_get('audioconverter', 0)==0) {
    _audioconverter_scheduler_ffmpeg_helper($job);
  }
  else {
    _audioconverter_scheduler_sox_helper($job);
  }
  
  $file = $job->converted;
  if (empty($file)) {
    watchdog('audioconverter', 'converted file is an empty file.', array(), WATCHDOG_ERROR);
    _audioconverter_render_job_change_status($fid, AUDIO_RENDERING_FAILED);
    return;
  }

  //$tmpfile = $file->filepath;

  $dest_dir = dirname($job->filepath) . '/';

  if (file_copy($file, $dest_dir)) {
    //update the file table entry and copy file content to new one
    $file->fid = $fid;
    //update file with new converted file
    drupal_write_record('files', $file, 'fid');
    
    if (variable_get('audioconverter_wav_setting', 1)==1) {
        //add new file entry for original file
        drupal_write_record('files', $job);
    }
    else {
        //delete original file
        file_delete($job->filepath);
    }
   
    // TODO : add data of rendering
    _audioconverter_render_job_change_status($fid, AUDIO_RENDERING_COMPLETE);
    // clear all cache data 
    cache_clear_all("*", 'cache_content', TRUE);
    
    watchdog('audioconverter', 'successfully converted %orig to %dest', array('%orig' => $job->filepath, '%dest' => $file->filepath), WATCHDOG_INFO);
  }
  else {
    _audioconverter_render_job_change_status($fid, AUDIO_RENDERING_FAILED);
    // get the username of the process owner
    $ownerarray = posix_getpwuid(posix_getuid());
    $owner=$ownerarray['name'];
    // get the username of the destination folder owner
    $fownerarray = posix_getpwuid(fileowner($dest_dir));
    $fowner=$fownerarray['name'];
    // get destination folder permissions
    $perms = substr(sprintf('%o', fileperms($dest_dir)), -4);
    watchdog('audioconverter', 'error moving audio %vid_file with nid = %nid to %dir the final directory. Check folder permissions.<br />The script was run by %uname .<br />The folder owner is %fowner .<br />The folder permissions are %perms .', array('%vid_file' => $job->origfile, '%nid' => $job->nid, '%dir' => $dest_dir, '%uname' => $owner, '%fowner' => $fowner, '%perms' => $perms), WATCHDOG_ERROR);
  }

}

function _audioconverter_scheduler_ffmpeg_helper(&$job) {
  $audiofile = escapeshellarg($job->filepath); // escape file name for safety
  $info = pathinfo($job->filepath);

  $convfile =  $info['dirname'] . "/" . $info['filename'] . ".mp3";
  $converter = variable_get('ffmpeg_executable_path', '/usr/bin/ffmpeg');

  $options = preg_replace(array('/%audiofile/', '/%convertfile/'),
          array($audiofile, $convfile),
         variable_get('ffmpeg_executable_command', ' -i %audiofile %convertfile'));

  // set to the converted file output
  $job->convfile = $convfile;

  $command = " $converter $options";

  watchdog('audioconverter', 'executing: ' . $command, array(), WATCHDOG_DEBUG);
  ob_start();
  passthru($command . " 2>&1", $command_return);
  $command_output = ob_get_contents();
  ob_end_clean();

  if (!file_exists($job->convfile) || !filesize($job->convfile)) {
    watchdog('audioconverter', 'Audio conversion failed. FFMPEG reported the following output: ' . $command_output, array(), WATCHDOG_ERROR);
 
  }
  else {
    $file_name = $convfile;
    $file = new stdClass();
    $file->uid      = $job->uid;
    $file->status   = FILE_STATUS_PERMANENT;
    $file->filename = basename($file_name);
    $file->filepath = $job->convfile;
    $file->filemime = file_get_mimetype($file_name);
    $file->filesize = filesize($job->convfile);
    $file->timestamp = time();

    $job->converted = $file;
  }
}

function _audioconverter_scheduler_sox_helper(&$job) {
  $audiofile = escapeshellarg($job->filepath); // escape file name for safety
  $convfile = basename($job->filename . ".mp3");
  $converter = variable_get('sox_executable_path', '/usr/bin/sox');

  $options = preg_replace(array('/%videofile/', '/%convertfile/'),
          array($audiofile, $convfile),
          variable_get('sox_executable_command',
          '%videofile %convertfile'));

  // set to the converted file output
  $job->convfile = $convfile;

  $command = " $converter $options";

  watchdog('audioconverter', 'executing: ' . $command, array(), WATCHDOG_DEBUG);
  ob_start();
  passthru($command . " 2>&1", $command_return);
  $command_output = ob_get_contents();
  ob_end_clean();

  if (!file_exists($job->convfile) || !filesize($job->convfile)) {
    watchdog('audioconverter', 'Audio conversion failed. SOX reported the following output: ' . $command_output, array(), WATCHDOG_ERROR);
 
  }
  else {
    $file_name = $convfile;
    $file = new stdClass();
    $file->uid      = $job->uid;
    $file->status   = FILE_STATUS_PERMANENT;
    $file->filename = basename($file_name);
    $file->filepath = $job->convfile;
    $file->filemime = file_get_mimetype($file_name);
    $file->filesize = filesize($job->convfile);
    $file->timestamp = time();

    $job->converted = $file;
  }
}

function _audio_render_load_job($fid) {
  $result = db_query('SELECT f.fid, f.filepath, f.filesize, f.filename, f.filemime, f.status
      FROM {audio_rendering} ar INNER JOIN {files} f
      ON ar.fid = f.fid WHERE ar.fid = f.fid AND f.fid = %d', $fid);

      return db_fetch_object($result);
}

function _audioconverter_render_job_change_status($fid, $status) {
  $result = db_query('UPDATE {audio_rendering} SET status = %d WHERE fid = %d ', $status, $fid);
}

function _audioconverter_file_in_queue($fid) {
    $fid=db_result(db_query('SELECT fid FROM {audio_rendering} WHERE fid=%d ', $fid));
    return $fid;
}

function audioconverter_save_file($fid) {
    db_query('INSERT INTO {audio_rendering} (fid, pid, status, started, completed)
              VALUES (%d, %d, %d, %d, %d)', $fid, 0, AUDIO_RENDERING_PENDING, 0, 0);
}

/* Return array of supported CCK fields */
function audioconverter_allowed_fields() {
    //Invoke hook_audioconverter_allowed_fields()
    $fields=module_invoke_all('audioconverter_allowed_fields', $aid);
    $fields[]='audiofield';
    $fields[]='audiorecorderfield';

    return $fields;
}

